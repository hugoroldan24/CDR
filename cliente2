import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GLib, Pango
import requests  # Añadido para los requests al servidor
import threading
import time
import lcddriver
import json
from lector import obtener_uid

class AteneaClient(Gtk.Window):
    def __init__(self):
        super().__init__(title="Client Atenea")
        self.server = "192.168.1.49"  # Cambiar por la IP del servidor
        self.port = "8000"  # Cambiar por el puerto del servidor

        # Configuración ventana
        self.set_border_width(10)
        self.set_default_size(400, 300)
        self.connect("destroy", self.on_destroy)

        # Layout principal
        self.stack = Gtk.Stack()
        self.stack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        self.stack.set_transition_duration(300)
        self.add(self.stack)

        # Pantalla de login
        self.loginbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.stack.add_named(self.loginbox, "login")
        self.loginbox.set_margin_top(20)
        self.loginbox.set_margin_bottom(20)
        self.loginbox.set_margin_start(20)
        self.loginbox.set_margin_end(20)

        self.loginlabel = Gtk.Label(label="PLEASE, LOGIN WITH YOUR UNIVERSITY CARD")
        self.loginbox.pack_start(self.loginlabel, False, False, 0)

        # Pantalla de consulta
        self.querybox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.stack.add_named(self.querybox, "query")
        self.querybox.set_margin_top(10)
        self.querybox.set_margin_bottom(10)
        self.querybox.set_margin_start(10)
        self.querybox.set_margin_end(10)

        self.welcomelabel = Gtk.Label(label="WELCOME")
        self.querybox.pack_start(self.welcomelabel, False, False, 0)

        self.query_entry = Gtk.Entry()
        self.query_entry.set_placeholder_text("Type your query:")
        self.query_entry.connect("activate", self.on_query)
        self.querybox.pack_start(self.query_entry, False, False, 0)

        self.logout_button = Gtk.Button(label="Logout")
        self.logout_button.connect("clicked", self.on_logout)
        self.querybox.pack_start(self.logout_button, False, False, 0)

        # Comienza la lectura del UID
        self.start_uid_thread()

        # Mostrar pantalla de login al inicio
        self.stack.set_visible_child_name("login")
        self.show_all()

    def start_uid_thread(self):
        thread = threading.Thread(target=self.read_uid_loop, daemon=True)
        thread.start()

    def read_uid_loop(self):
        while True:
            uid = obtener_uid()
            GLib.idle_add(self.process_uid, uid)

   def process_uid(self, uid):
    # Actualización inicial segura
    GLib.idle_add(self.loginlabel.set_text, "Validando tarjeta en la base de datos...")
    print("Validando")
    
    try:
        url = f"http://{self.server}:{self.port}/login.php?id={uid}"
        response = requests.get(url, timeout=5)
        print("Validado")
        
        print(f"STATUS CODE RECIBIDO: {response.status_code}")
        
        if response.status_code == 200:
            print("uee")
            print(response.text)
            
            try:
                data = response.json()
                name = data.get("name", "Desconocido")
                GLib.idle_add(self.update_welcome_screen, name)
                # GLib.idle_add(self.mostrar_lcd, name)  # Si lo necesitas
            except ValueError:
                print("invalido")
                GLib.idle_add(self._safe_update_label, "Respuesta inválida del servidor","red")
        else:
            print("noo")
            GLib.idle_add(self._safe_update_label,"Usuario no encontrado","red")
            
    except requests.exceptions.RequestException as e:
        print("error conexion")
        GLib.idle_add(self._safe_update_label,f"Error de conexión: {str(e)}","red")
        return

     def mostrar_lcd(self, name):
       lcd = lcddriver.lcd()
       lcd.lcd_clear()
       message = f"Benvingut {name}"
       lines = message.split("\n")
       for i, line in enumerate(lines[:4]):
           lcd.lcd_display_string(line[:20], i + 1)

    def on_destroy(self, widget):
        print("Ventana cerrada. Saliendo de la aplicación.")
        Gtk.main_quit()

    def on_logout(self, button):
        self.stack.set_visible_child_name("login")
        self.loginlabel.set_text("Please login with your university card")

    def on_query(self, widget):
        queryname = self.query_entry.get_text().strip()
        if queryname:
            url = f"http://{self.server}:{self.port}/querys.php/{queryname}"
            threading.Thread(target=self.do_query, args=(url,)).start()
        else:
            self.update_welcomelabel("No query found!", "red")

    def do_query(self, url):
        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            data = response.json()
            GLib.idle_add(self.create_table, data)
        except requests.exceptions.RequestException as e:
            GLib.idle_add(self.update_welcomelabel, f"Connection error: {str(e)}", "red")

    def create_table(self, json_array):
        if not json_array:
            print("No data")
            return

        if hasattr(self, "treeview"):
            self.treeview.destroy()

        keys = list(json_array[0].keys())
        self.list = Gtk.ListStore(*[str] * len(keys))

        for item in json_array:
            fila = [str(item.get(key, "-")) for key in keys]
            self.list.append(fila)

        self.treeview = Gtk.TreeView(model=self.list)
        for i, key in enumerate(keys):
            renderer = Gtk.CellRendererText()
            columna = Gtk.TreeViewColumn(key, renderer, text=i)
            self.treeview.append_column(columna)

        self.querybox.pack_start(self.treeview, True, True, 0)
        self.querybox.show_all()

    def update_loginlabel(self, text, color="red"):
        self.loginlabel.set_markup(f'<span foreground="{color}">{text}</span>')

    def update_welcomelabel(self, text, color="red"):
        self.welcomelabel.set_markup(f'<span foreground="{color}">{text}</span>')

    def update_welcome_screen(self, name):
        self.welcomelabel.set_text(f"Benvingut/da, {name}!")
        self.stack.set_visible_child_name("query")

    def _safe_update_label(self, text, color="black"):
    try:
        if hasattr(self, 'loginlabel') and self.loginlabel:
            # Escapar caracteres especiales para markup
            safe_text = str(text).replace('&', '&amp;').replace('<', '&lt;')
            self.loginlabel.set_markup(f'<span color="{color}">{safe_text}</span>')
    except Exception as e:
        print(f"Error al actualizar label: {e}")


if __name__ == "__main__":
    win = AteneaClient()
    win.show_all()
    Gtk.main()
